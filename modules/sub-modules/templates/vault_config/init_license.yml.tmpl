#!/usr/bin/env bash

# Making working dir for Vault setup
mkdir -p /home/ubuntu/_vaultSetup
touch /home/ubuntu/_vaultSetup/keys.json
touch /home/ubuntu/_vaultSetup/license.json

sudo chown -R vault:vault /home/ubuntu/_vaultSetup
sudo chmod -R 0644 /home/ubuntu/_vaultSetup/*

echo "Initializing Vault..."
# Wait for Vault to start 
sleep 1

vault operator init -format=json -recovery-shares=5 -recovery-threshold=3 > /home/ubuntu/_vaultSetup/keys.json

# Wait for Vault to get Initialized with KMS
sleep 10
ROOT_TOKEN=`jq -r .root_token /home/ubuntu/_vaultSetup/keys.json`

if [ -z "$ROOT_TOKEN" ]
then
    echo "ROOT_TOKEN is empty !!!"
    exit 1
fi

cat << EOF >> /etc/profile.d/vault.sh
export VAULT_TOKEN=$ROOT_TOKEN
EOF

# Creating license.json

cat << EOF > /home/ubuntu/_vaultSetup/license.json
{
  "text": "${vault_license}"
}
EOF

# Install the Vault license and deletes the license file
function install_vault_license () {
  
curl -s --request PUT --header "X-Vault-Token: $1" --data @/home/ubuntu/_vaultSetup/license.json https://127.0.0.1:8200/v1/sys/license

if [ $? -eq 0 ]
then 
    rm /home/ubuntu/_vaultSetup/license.json
     echo "Writing license file IS successful"
else
    echo "Writing license file NOT successful"
fi
}

# Check if Vault is ready for being licensed
while true 
do 
  if [[ $(curl -LI -o /dev/null -w '%%{http_code}' -s https://127.0.0.1:8200/v1/sys/health) =~ (200|429|473) ]] # HTTP codes that show if Vault is ready to be used
  then
    install_vault_license $ROOT_TOKEN
    break
  else
    echo "Vault is not ready yet !"
  sleep 1
  fi
done

# For debugging
echo "This is a active node" > /tmp/vault_mode